#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ИдентификаторыНесуществующихПользователейИБ = Новый Массив;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПользователиИБ", ПользователиИБ(ИдентификаторыНесуществующихПользователейИБ));
	ВнешниеНаборыДанных.Вставить("КонтактнаяИнформация", КонтактнаяИнформация(Настройки));
	ВнешниеНаборыДанных.Вставить("ПраваРолей", ПраваРолей());
	ВнешниеНаборыДанных.Вставить("РолиПользователейИБ", РолиПользователейИБ());
	ВнешниеНаборыДанных.Вставить("СведенияОПользователях", СведенияОПользователях());
		
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		"ИдентификаторыНесуществующихПользователейИБ", ИдентификаторыНесуществующихПользователейИБ);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПользователиИБ(ИдентификаторыНесуществующихПользователейИБ)
	
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ИдентификаторыНесуществующихПользователейИБ.Добавить(ПустойУникальныйИдентификатор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ПустойУникальныйИдентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ,
	|	Пользователи.СвойстваПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ,
	|	ВнешниеПользователи.СвойстваПользователяИБ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Выгрузка.Индексы.Добавить("ИдентификаторПользователяИБ");
	Выгрузка.Колонки.Добавить("Сопоставлен", Новый ОписаниеТипов("Булево"));
	
	ПользователиИБ = Новый ТаблицаЗначений;
	ПользователиИБ.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ПользователиИБ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ПользователиИБ.Колонки.Добавить("ВходВПрограммуРазрешен",    Новый ОписаниеТипов("Булево"));
	ПользователиИБ.Колонки.Добавить("АутентификацияСтандартная", Новый ОписаниеТипов("Булево"));
	ПользователиИБ.Колонки.Добавить("ПоказыватьВСпискеВыбора",   Новый ОписаниеТипов("Булево"));
	ПользователиИБ.Колонки.Добавить("ЗапрещеноИзменятьПароль",   Новый ОписаниеТипов("Булево"));
	ПользователиИБ.Колонки.Добавить("АутентификацияOpenID",      Новый ОписаниеТипов("Булево"));
	ПользователиИБ.Колонки.Добавить("АутентификацияОС",          Новый ОписаниеТипов("Булево"));
	ПользователиИБ.Колонки.Добавить("ПользовательОС", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024)));
	ПользователиИБ.Колонки.Добавить("Язык",           Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ПользователиИБ.Колонки.Добавить("РежимЗапуска",   Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	
	УстановитьПривилегированныйРежим(Истина);
	ВсеПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для каждого ПользовательИБ Из ВсеПользователиИБ Цикл
		
		СвойстваПользовательИБ = СвойстваПользователяИБ(ПользовательИБ.УникальныйИдентификатор);
		
		НоваяСтрока = ПользователиИБ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваПользовательИБ);
		Язык = СвойстваПользовательИБ.Язык;
		НоваяСтрока.Язык = ?(ЗначениеЗаполнено(Язык), Метаданные.Языки[Язык].Синоним, "");
		НоваяСтрока.ВходВПрограммуРазрешен = Пользователи.ВходВПрограммуРазрешен(СвойстваПользовательИБ);
		
		Строка = Выгрузка.Найти(СвойстваПользовательИБ.УникальныйИдентификатор, "ИдентификаторПользователяИБ");
		Если Строка <> Неопределено Тогда
			Строка.Сопоставлен = Истина;
			Если Не НоваяСтрока.ВходВПрограммуРазрешен Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока,
					ПользователиСлужебный.ХранимыеСвойстваПользователяИБ(Строка));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура("Сопоставлен", Ложь);
	Строки = Выгрузка.НайтиСтроки(Отбор);
	Для каждого Строка Из Строки Цикл
		ИдентификаторыНесуществующихПользователейИБ.Добавить(Строка.ИдентификаторПользователяИБ);
	КонецЦикла;
	
	Возврат ПользователиИБ;
	
КонецФункции

Функция КонтактнаяИнформация(Настройки)
	
	ТипыСсылки = Новый Массив;
	ТипыСсылки.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипыСсылки.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
	
	Контакты = Новый ТаблицаЗначений;
	Контакты.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ТипыСсылки));
	Контакты.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка"));
	Контакты.Колонки.Добавить("ЭлектронныйАдрес", Новый ОписаниеТипов("Строка"));
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат Контакты;
	КонецЕсли;
	
	ЗаполнитьКонтакты = Ложь;
	ПолеТелефон          = Новый ПолеКомпоновкиДанных("Телефон");
	ПолеЭлектронныйАдрес = Новый ПолеКомпоновкиДанных("ЭлектронныйАдрес");
	
	Для каждого Элемент Из Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных")
		   И (Элемент.Поле = ПолеТелефон Или Элемент.Поле = ПолеЭлектронныйАдрес)
		   И Элемент.Использование Тогда
			
			ЗаполнитьКонтакты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗаполнитьКонтакты Тогда
		Возврат Контакты;
	КонецЕсли;
	
	ВидыКонтактнойИнформации = Новый Массив;
	ВидыКонтактнойИнформации.Добавить(Справочники["ВидыКонтактнойИнформации"].EmailПользователя);
	ВидыКонтактнойИнформации.Добавить(Справочники["ВидыКонтактнойИнформации"].ТелефонПользователя);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыКонтактнойИнформации", ВидыКонтактнойИнформации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПользователиКонтактнаяИнформация.Вид,
	|	ПользователиКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Вид В (&ВидыКонтактнойИнформации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПользователиКонтактнаяИнформация.Ссылка,
	|	ПользователиКонтактнаяИнформация.Тип.Порядок,
	|	ПользователиКонтактнаяИнформация.Вид";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяСсылка = Неопределено;
	Телефоны = "";
	ЭлектронныеАдреса = "";
	
	Пока Выборка.Следующий() Цикл
		Если ТекущаяСсылка <> Выборка.Ссылка Тогда
			Если ТекущаяСсылка <> Неопределено Тогда
				Если ЗначениеЗаполнено(Телефоны) Или ЗначениеЗаполнено(ЭлектронныеАдреса) Тогда
					НоваяСтрока = Контакты.Добавить();
					НоваяСтрока.Ссылка = ТекущаяСсылка;
					НоваяСтрока.Телефон = Телефоны;
					НоваяСтрока.ЭлектронныйАдрес = ЭлектронныеАдреса;
				КонецЕсли;
			КонецЕсли;
			Телефоны = "";
			ЭлектронныеАдреса = "";
			ТекущаяСсылка = Выборка.Ссылка;
		КонецЕсли;
		Если Выборка.Вид = Справочники["ВидыКонтактнойИнформации"].ТелефонПользователя Тогда
			Телефоны = Телефоны + ?(ЗначениеЗаполнено(Телефоны), ", ", "");
			Телефоны = Телефоны + Выборка.Представление;
		КонецЕсли;
		Если Выборка.Вид = Справочники["ВидыКонтактнойИнформации"].EmailПользователя Тогда
			ЭлектронныеАдреса = ЭлектронныеАдреса + ?(ЗначениеЗаполнено(ЭлектронныеАдреса), ", ", "");
			ЭлектронныеАдреса = ЭлектронныеАдреса + Выборка.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Контакты;
	
КонецФункции

#Область Пользователи
// Возвращает свойства пользователя информационной базы в виде структуры.
// Если пользователь с указанным идентификатором или именем не существует, то возвращается Неопределено.
//
// Параметры:
//  ИмяИлиИдентификатор  - Строка, УникальныйИдентификатор - имя или идентификатор пользователя ИБ.
//
// Возвращаемое значение:
//  Структура, Неопределено - свойства пользователя, см. Пользователи.НовоеОписаниеПользователяИБ.
//                            Неопределено, если пользователь с указанным идентификатором или именем не существует.
//
Функция СвойстваПользователяИБ(Знач ИмяИлиИдентификатор)
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("Пользователи.СвойстваПользователяИБ", "ИмяИлиИдентификатор",
		ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));
		 
	Свойства = НовоеОписаниеПользователяИБ();
	Свойства.Роли = Новый Массив;
	
	Если ТипЗнч(ИмяИлиИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			//МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			//СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
			СеансЗапущенБезРазделителей = СеансЗапущенБезРазделителей();
		Иначе
			СеансЗапущенБезРазделителей = Истина;
		КонецЕсли;
		
		//Если ОбщегоНазначения.РазделениеВключено()
		Если РазделениеВключено()
		   И СеансЗапущенБезРазделителей
		   //И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		   И ДоступноИспользованиеРазделенныхДанных()
		   И ИмяИлиИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
			
			ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		Иначе
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИмяИлиИдентификатор);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИмяИлиИдентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяИлиИдентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СкопироватьСвойстваПользователяИБ(Свойства, ПользовательИБ);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);
	Возврат Свойства;
	
КонецФункции

// Возвращает пустую структуру описания пользователя ИБ.
// Назначение свойств структуры соответствует свойствам объекта ПользовательИнформационнойБазы.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор пользователя информационной базы.
//   * Имя                       - Строка - имя пользователя информационной базы. Например, "Иванов".
//   * ПолноеИмя                 - Строка - полное имя пользователя информационной базы. 
//                                          Например, "Иванов Иван Иванович (менеджер по продажам)"
//   * АутентификацияOpenID      - Булево - разрешена ли пользователю аутентификация по протоколу OpenID.
//
//   * АутентификацияСтандартная - Булево - разрешена ли стандартная аутентификация (по пользователю и паролю).
//   * ПоказыватьВСпискеВыбора   - Булево - показывать ли полное имя пользователя в списке для выбора при запуске.
//   * Пароль                    - Строка, Неопределено - пароль, используемый при стандартной аутентификации.
//   * СохраняемоеЗначениеПароля - Строка, Неопределено - хранимые значения пароля (хеш).
//   * ПарольУстановлен          - Булево - установлен ли пароль у пользователя.
//   * ЗапрещеноИзменятьПароль   - Булево - определяет возможность пользователя изменять свой пароль.
//
//   * АутентификацияОС          - Булево - разрешена ли аутентификация средствами операционной системы.
//   * ПользовательОС            - Строка - имя соответствующей учетной записи пользователя операционной системы 
//                                          (не учитывается в учебной версии платформы).
//
//   * ОсновнойИнтерфейс         - Строка, Неопределено - имя основного интерфейса пользователя информационной базы
//                                         (из коллекции Метаданные.Интерфейсы).
//   * РежимЗапуска              - Строка, Неопределено - "Авто", "ОбычноеПриложение" или "УправляемоеПриложение".
//   * Язык                      - Строка, Неопределено - имя языка из коллекции Метаданные.Языки.
//   * Роли                      - Неопределено - роли не указаны.
//                               - Массив - коллекция имен ролей пользователя информационной базы.
//
Функция НовоеОписаниеПользователяИБ() Экспорт
	
	// Подготовка структур возвращаемых данных.
	Свойства = Новый Структура;
	
	Свойства.Вставить("УникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Свойства.Вставить("Имя",                       "");
	Свойства.Вставить("ПолноеИмя",                 "");
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("СтарыйПароль",              Неопределено);
	Свойства.Вставить("Пароль",                    Неопределено);
	Свойства.Вставить("СохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПарольУстановлен",          Ложь);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательОС",            "");
	
	Свойства.Вставить("ОсновнойИнтерфейс",
		?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	
	Свойства.Вставить("РежимЗапуска",              "Авто");
	
	Свойства.Вставить("Язык",
		?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Свойства.Вставить("Роли", Неопределено);
	
	Возврат Свойства;
	
КонецФункции

// Копирует значения свойств пользователя ИБ с преобразованием
// в/из строковых идентификаторов для основного интерфейса,
// языка, режима запуска и ролей.
//
//  Несуществующие свойства в источнике или приемнике не копируются.
//
//  Свойства Пароль и СохраняемоеЗначениеПароля не копируются, если
// значения в Источнике равно Неопределено.
//
//  Свойства АутентификацияОС, АутентификацияСтандартная,
// АутентификацияOpenID и ПользовательОС не переустанавливается,
// если совпадают, когда Приемник типа ПользовательИнформационнойБазы.
//
//  Свойства УникальныйИдентификатор, ПарольУстановлен, СтарыйПароль
// не копируются, если Приемник типа ПользовательИнформационнойБазы.
//
//  Преобразование выполняется только для типа Источника или Приемника.
// ПользовательИнформационнойБазы.
//
// Параметры:
//  Приемник     - Структура, ПользовательИнформационнойБазы, ДанныеФормыКоллекция - подмножество
//                 свойств из НовоеОписаниеПользователяИБ().
//
//  Источник     - Структура, ПользовательИнформационнойБазы, ДанныеФормыКоллекция - как и приемник,
//                 но типы обратные, т.е. когда в Приемнике тип Структура, тогда в источнике НЕ Структура.
// 
//  КопируемыеСвойства  - Строка - список свойств через запятую, которые нужно скопировать (без префикса).
//  ИсключаемыеСвойства - Строка - список свойств через запятую, которые не нужно копировать (без префикса).
//  ПрефиксСвойств      - Строка - начальное имя для Источника или Приемника типа НЕ Структура.
//
Процедура СкопироватьСвойстваПользователяИБ(Приемник,
                                            Источник,
                                            КопируемыеСвойства = "",
                                            ИсключаемыеСвойства = "",
                                            ПрефиксСвойств = "") Экспорт
	
	ВсеСвойства = НовоеОписаниеПользователяИБ();
	
	Если ЗначениеЗаполнено(КопируемыеСвойства) Тогда
		СтруктураКопируемыхСвойств = Новый Структура(КопируемыеСвойства);
	Иначе
		СтруктураКопируемыхСвойств = ВсеСвойства;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
		СтруктураИсключаемыхСвойств = Новый Структура(ИсключаемыеСвойства);
	Иначе
		СтруктураИсключаемыхСвойств = Новый Структура;
	КонецЕсли;
	
	//Если СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
	Если ЭтоУчебнаяПлатформа() Тогда
		СтруктураИсключаемыхСвойств.Вставить("АутентификацияОС");
		СтруктураИсключаемыхСвойств.Вставить("ПользовательОС");
	КонецЕсли;
	
	ПарольУстановлен = Ложь;
	
	Для каждого КлючИЗначение Из ВсеСвойства Цикл
		Свойство = КлючИЗначение.Ключ;
		
		Если НЕ СтруктураКопируемыхСвойств.Свойство(Свойство)
		 ИЛИ СтруктураИсключаемыхСвойств.Свойство(Свойство) Тогда
		
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы") Тогда
			
			Если Свойство = "Пароль"
			 ИЛИ Свойство = "СтарыйПароль" Тогда
				
				ЗначениеСвойства = Неопределено;
				
			ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
				ЗначениеСвойства = ?(Источник.ОсновнойИнтерфейс = Неопределено,
				                     "",
				                     Источник.ОсновнойИнтерфейс.Имя);
			
			ИначеЕсли Свойство = "РежимЗапуска" Тогда
				ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(Источник.РежимЗапуска);
				ЗначениеСвойства = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
				
			ИначеЕсли Свойство = "Язык" Тогда
				ЗначениеСвойства = ?(Источник.Язык = Неопределено,
				                     "",
				                     Источник.Язык.Имя);
				
			ИначеЕсли Свойство = "Роли" Тогда
				
				ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
				Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
					Приемник.Роли = Новый Массив;
				Иначе
					Приемник.Роли.Очистить();
				КонецЕсли;
				
				Для каждого Роль Из Источник.Роли Цикл
					Приемник.Роли.Добавить(Роль.Имя);
				КонецЦикла;
				
				Продолжить;
			Иначе
				ЗначениеСвойства = Источник[Свойство];
			КонецЕсли;
			
			ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
			ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
			ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
		Иначе
			Если ТипЗнч(Источник) = Тип("Структура") Тогда
				Если Источник.Свойство(Свойство) Тогда
					ЗначениеСвойства = Источник[Свойство];
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Источник);
				ЗначениеСвойства = ВременнаяСтруктура[ПолноеИмяСвойства];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
			
				Если Свойство = "УникальныйИдентификатор"
				 ИЛИ Свойство = "СтарыйПароль"
				 ИЛИ Свойство = "ПарольУстановлен" Тогда
					
					Продолжить;
					
				ИначеЕсли Свойство = "АутентификацияOpenID"
				      ИЛИ Свойство = "АутентификацияСтандартная"
				      ИЛИ Свойство = "АутентификацияОС"
				      ИЛИ Свойство = "ПользовательОС" Тогда
					
					Если Приемник[Свойство] <> ЗначениеСвойства Тогда
						Приемник[Свойство] = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Пароль" Тогда
					Если ЗначениеСвойства <> Неопределено Тогда
						Приемник.Пароль = ЗначениеСвойства;
						ПарольУстановлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Свойство = "СохраняемоеЗначениеПароля" Тогда
					Если ЗначениеСвойства <> Неопределено
					   И НЕ ПарольУстановлен Тогда
						Приемник.СохраняемоеЗначениеПароля = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ЗначениеСвойства);
					Иначе
						Приемник.ОсновнойИнтерфейс = Неопределено;
					КонецЕсли;
				
				ИначеЕсли Свойство = "РежимЗапуска" Тогда
					Если ЗначениеСвойства = "Авто"
					 ИЛИ ЗначениеСвойства = "ОбычноеПриложение"
					 ИЛИ ЗначениеСвойства = "УправляемоеПриложение" Тогда
						
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ЗначениеСвойства];
					Иначе
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Язык" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.Язык = Метаданные.Языки.Найти(ЗначениеСвойства);
					Иначе
						Приемник.Язык = Неопределено;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Роли" Тогда
					Приемник.Роли.Очистить();
					Если ЗначениеСвойства <> Неопределено Тогда
						Для каждого ИмяРоли Из ЗначениеСвойства Цикл
							Роль = Метаданные.Роли.Найти(ИмяРоли);
							Если Роль <> Неопределено Тогда
								Приемник.Роли.Добавить(Роль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если Свойство = "Имя"
					   И Приемник[Свойство] <> ЗначениеСвойства Тогда
					
						Если СтрДлина(ЗначениеСвойства) > 64 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |превышает длину 64 символа.'"),
								ЗначениеСвойства);
							
						ИначеЕсли СтрНайти(ЗначениеСвойства, ":") > 0 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |содержит запрещенный символ "":"".'"),
								ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
					Приемник[Свойство] = Источник[Свойство];
				КонецЕсли;
			Иначе
				Если Свойство = "Роли" Тогда
					
					ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
					ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
					Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
						Продолжить;
					ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
						Приемник.Роли = Новый Массив;
					Иначе
						Приемник.Роли.Очистить();
					КонецЕсли;
					
					Если Источник.Роли <> Неопределено Тогда
						Для каждого Роль Из Источник.Роли Цикл
							Приемник.Роли.Добавить(Роль.Имя);
						КонецЦикла;
					КонецЕсли;
					Продолжить;
					
				ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
					ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				Иначе
					ПолноеИмяСвойства = Свойство;
				КонецЕсли;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
				ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
//   Булево - Истина, если сеанс запущен без разделителей.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных.Количество() = 0;
	
КонецФункции

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
//   Булево - Истина, если это разделенная конфигурация.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	ЕстьРазделители = Ложь;
	Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ЕстьРазделители = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРазделители;
	
КонецФункции

// Возвращает признак работы в режиме разделения данных по областям
// (технически это признак условного разделения).
// 
// Возвращает Ложь, если конфигурация не может работать в режиме разделения данных
// (не содержит общих реквизитов, предназначенных для разделения данных).
//
// Возвращаемое значение:
//  Булево - Истина, если разделение включено.
//         - Ложь,   если разделение выключено или не поддерживается.
//
Функция РазделениеВключено() Экспорт
	
	Если Не ЭтоРазделеннаяКонфигурация() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак возможности обращения к разделенным данным (которые входят в состав разделителей).
// Признак относится к сеансу, но может меняться во время работы сеанса, если разделение было включено
// в самом сеансе, поэтому проверку следует делать непосредственно перед обращением к разделенным данным.
// 
// Возвращает Истина, если конфигурация не может работать в режиме разделения данных
// (не содержит общих реквизитов, предназначенных для разделения данных).
//
// Возвращаемое значение:
//   Булево - Истина, если разделение не поддерживается, либо разделение выключено,
//                    либо разделение включено и разделители    установлены.
//          - Ложь,   если разделение включено и разделители не установлены.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Если Не РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Метаданные.ПараметрыСеанса.Индекс("ОбластьДанныхИспользование") = -1 Тогда 
		Возврат Ложь;
	Иначе
		Возврат ПараметрыСеанса["ОбластьДанныхИспользование"];
	КонецЕсли;
	
КонецФункции

Функция ЭтоУчебнаяПлатформа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Попытка
		ПользовательОС = ТекущийПользователь.ПользовательОС;
	Исключение
		ТекущийПользователь = Неопределено;
	КонецПопытки;
	
	Возврат ТекущийПользователь = Неопределено;
	
КонецФункции


#КонецОбласти

#КонецЕсли


Функция РолиПользователейИБ()
	
	ПользователиИБ = Новый ТаблицаЗначений;
	ПользователиИБ.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ПользователиИБ.Колонки.Добавить("Пользователь");
	ПользователиИБ.Колонки.Добавить("Роль");
	ПользователиИБ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ПользователиИБ.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ПользователиИБ.Колонки.Добавить("ПринадлежностьОбъекта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ПользователиИБ.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ПользователиИБ.Колонки.Добавить("РасширениеКонфигурации", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	
	УстановитьПривилегированныйРежим(Истина);
	ВсеПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	
	
	ОтборПоПользователям	= Новый Соответствие;
	Для Каждого Отбор ИЗ КомпоновщикНастроек.ПолучитьНастройки().Отбор.Элементы Цикл
		Если Отбор.Использование Тогда
			Если "" + Отбор.ЛевоеЗначение = "Пользователь" Тогда
				Если Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Для Каждого Элемент Из Отбор.ПравоеЗначение Цикл
						ОтборПоПользователям.Вставить(Элемент, Элемент);				
					КонецЦикла;
				ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ОтборПоПользователям.Вставить(Отбор.ПравоеЗначение, Отбор.ПравоеЗначение);				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОтборПоПользователям	= ОтборПоПользователям.Количество() > 0;
	
	Для каждого ПользовательИБ Из ВсеПользователиИБ Цикл
		
		Пользователь	= Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		Если ЕстьОтборПоПользователям И ОтборПоПользователям[Пользователь] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Роль Из ПользовательИБ.Роли Цикл
			НоваяСтрока = ПользователиИБ.Добавить();
			НоваяСтрока.УникальныйИдентификатор	= ПользовательИБ.УникальныйИдентификатор;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Роль);
			НоваяСтрока.РасширениеКонфигурации	= Роль.РасширениеКонфигурации();
			НоваяСтрока.Пользователь	= Пользователь;
			НоваяСтрока.Роль	= Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", "Роль." + Роль.Имя);
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат ПользователиИБ;
	
КонецФункции

Функция ПраваРолей()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	Таблица.Колонки.Добавить("Право", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	Таблица.Колонки.Добавить("Доступ", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ОбъектМетаданных");
	//Таблица.Колонки.Добавить("ОбъектМетаданных", Новый ОписаниеТипов(Справочники.ИдентификаторыОбъектовМетаданных));
	
	//Права	= Новый СписокЗначений;
	//Права.Добавить("Чтение");
	//Права.Добавить("Изменение");
	//Права.Добавить("Проведение");
	
	Права	= ПроверяемыеПрава();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
		|	ИдентификаторыОбъектовМетаданных.Имя КАК Имя,
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя КАК ПолноеИмя,
		|	ИдентификаторыОбъектовМетаданных.Родитель.Имя КАК РодительИмя
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	НЕ ИдентификаторыОбъектовМетаданных.Родитель.Имя = ""Роли""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПраваТипМетаданных	= ПраваТиповМетаданных();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			ОбъектМетаданных	= Метаданные[ВыборкаДетальныеЗаписи.РодительИмя][ВыборкаДетальныеЗаписи.Имя];
			//ОбъектМетаданных	= Метаданные[ВыборкаДетальныеЗаписи.РодительИмя][ВыборкаДетальныеЗаписи.Имя];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Для Каждого Роль ИЗ Метаданные.Роли Цикл
			Для Каждого Право Из Права Цикл
				
				Если НЕ ПраваТипМетаданных[Право.Ключ].Свойство(ВыборкаДетальныеЗаписи.РодительИмя) Тогда	
					Продолжить;
				КонецЕсли;
					
				Попытка
					//ОбъектМетаданных 	= ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ВыборкаДетальныеЗаписи.Ссылка);
					Если ПравоДоступа(Право.Ключ, ОбъектМетаданных, Роль) Тогда 
						НоваяСтрока	= Таблица.Добавить();
						НоваяСтрока.ОбъектМетаданных	= ВыборкаДетальныеЗаписи.Ссылка;
						НоваяСтрока.Роль	= Роль.Имя;
						НоваяСтрока.Право	= Право.Ключ;
						НоваяСтрока.Доступ	= Истина;
					КонецЕсли;
				Исключение
					А = 1;
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции


Функция ПроверяемыеПрава()
	
	Права	= Новый Структура;
	
	Для Каждого Отбор ИЗ КомпоновщикНастроек.ПолучитьНастройки().Отбор.Элементы Цикл
		Если Отбор.Использование Тогда
			Если "" + Отбор.ЛевоеЗначение = "Право" Тогда
				Если Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Для Каждого Право Из Отбор.ПравоеЗначение Цикл
						Права.Вставить(Право, Право);				
					КонецЦикла;
				ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Права.Вставить(Отбор.ПравоеЗначение, Отбор.ПравоеЗначение);				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Права.Количество() > 0 Тогда
		Возврат Права;
	КонецЕсли;
	
	Права	= Новый Структура("Чтение, Изменение");
	
	//Права	= Новый Структура("Чтение, Добавление, Изменение, Удаление, 
	//|Проведение, ОтменаПроведения, Просмотр, ИнтерактивноеДобавление, Редактирование, Использование");
	
	Возврат Права;
	
	//Чтение (Read) - чтение; 
	//Добавление (Insert) - добавление; 
	//Изменение (Update) - изменение; 
	//Удаление (Delete) - удаление; 
	//Проведение (Posting) - проведение документов; 
	//ОтменаПроведения (UndoPosting) - отмена проведения документов; 
	//Просмотр (View) - просмотр; 
	//ИнтерактивноеДобавление (InteractiveInsert) - интерактивное добавление; 
	//Редактирование (Edit) - редактирование; 
	//ИнтерактивнаяПометкаУдаления (InteractiveSetDeletionMark) - интерактивная пометка на удаление; 
	//ИнтерактивноеСнятиеПометкиУдаления (InteractiveClearDeletionMark) - интеракти вное снятие пометки на удаление; 
	//ИнтерактивноеУдалениеПомеченных (InteractiveDeleteMarked) - интерактивное удаление помеченных объектов; 
	//ИнтерактивноеПроведение (InteractivePosting) - интерактивное проведение; 
	//ИнтерактивноеПроведениеНеОперативное (InteractivePostingRegular) - интерактивное проведение (стандартными командами форм) документа в неоперативном режиме; 
	//ИнтерактивнаяОтменаПроведения (InteractiveUndoPosting) - интерактивная отмена проведения; 
	//ИнтерактивноеИзменениеПроведенных (InteractiveChangeOfPosted) - интерактивное редактирование проведенного документа. Если право не установлено, то пользователь не может проведенный документ удалить, установить пометку удаления, перепровести или сделать непроведенным. Форма такого документа открывается в режиме просмотра; 
	//ВводПоСтроке (InputByString) - использование режима ввода по строке; 
	//УправлениеИтогами (TotalsControl) - управление итогами регистра бухгалтерии и регистра накопления (установка периода, по который рассчитаны итоги, и пересчет итогов); 
	//Использование (Use) - использование; 
	//ИнтерактивноеУдаление (InteractiveDelete) - интерактивное непосредственное удаление; 
	//Администрирование (Administration) - администрирование информационной базы; требуется наличия права "Администрирование данных"; 
	//АдминистрированиеДанных (DataAdministration) - право на административные действия над данными; 
	//МонопольныйРежим (ExclusiveMode) - использование монопольного режима; 
	//АктивныеПользователи (ActiveUsers) - просмотр списка активных пользователей; 
	//ЖурналРегистрации (EventLog) - журнал регистрации; 
	//ВнешнееСоединение (ExternalConnection) - внешнее соединение; 
	//Automation (Automation) - использование automation; 
	//ИнтерактивноеОткрытиеВнешнихОбработок (InteractiveOpenExtDataProcessors) - интерактивное открытие внешних обработок; 
	//ИнтерактивноеОткрытиеВнешнихОтчетов (InteractiveOpenExtReports) - интерактивное открытие внешних отчетов; 
	//Получение (Get) - получение значения, не хранящегося в базе данных; 
	//Установка (Set) - установка значения, не сохраняемого в базе данных; 
	//ИнтерактивнаяАктивация (InteractiveActivate) - интерактивная активация; 
	//Старт (Start) - старт бизнес-процесса; 
	//ИнтерактивныйСтарт (InteractiveStart) - интерактивный старт бизнес-процесса; 
	//Выполнение (Execute) - выполнение задачи; 
	//ИнтерактивноеВыполнение (InteractiveExecute) - интерактивное выполнение задачи; 
	//Вывод (Output) - вывод на печать, запись и копирование в буфер обмена; 
	//ОбновлениеКонфигурацииБазыДанных (UpdateDataBaseConfiguration) - обновление конфигурации базы данных; 
	//ТонкийКлиент (ThinClient) - право запуска тонкого клиента; 
	//ВебКлиент (WebClient) - право запуска веб-клиента; 
	//ТолстыйКлиент (ThickClient) - право запуска толстого клиента; 
	//РежимВсеФункции (AllFunctionsMode) - право на использования режима "Все функции"; 
	//СохранениеДанныхПользователя (SaveUserData) - право на сохранение данных пользователя (настроек, избранного, истории); 
	//ИзменениеСтандартнойАутентификации (StandardAuthenticationChange) - пользователь имеет право изменять свои сохраненные параметры стандартной аутентификации внешнего источника данных; 
	//ИзменениеСтандартнойАутентификацииСеанса (SessionStandardAuthenticationChange) - пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса; 
	//ИзменениеАутентификацииОССеанса (SessionOSAuthenticationChange) - пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса и текущего пользователя; 
	//ИнтерактивноеУдалениеПредопределенныхДанных (InteractiveDeletePredefinedData) - интерактивное удаление предопределенных данных; 
	//ИнтерактивнаяПометкаУдаленияПредопределенныхДанных (InteractiveSetDeletionMarkPredefinedData) - интерактивная пометка предопределенных данных; 
	//ИнтерактивноеСнятиеПометкиУдаленияПредопределенных (InteractiveClearDeletionMarkPredefinedData) - интерактивное снятие пометки предопределенных данных; 
	//ИнтерактивноеУдалениеПомеченныхПредопределенныхДан (InteractiveDeleteMarkedPredefinedData) - интерактивное удаление помеченных предопределенных данных; 
	//АдминистрированиеРасширенийКонфигурации (ConfigExtensionsAdministration) - право на администрирование расширений конфигурации. 
	//ЧтениеИсторииДанных (ReadDataHistory) Предоставляет право читать записи истории данных 
	//ЧтениеИсторииОтсутствующихДанных (ReadMissingDataHistory) Предоставляет право читать записи истории отсутствующих данных 
	//ИзменениеИсторииДанных (UpdateDataHistory) Предоставляет право изменения записи истории данных 
	//ИзменениеИсторииОтсутствующихДанных (UpdateMissingDataHistory) Предоставляет право изменения записи истории отсутствующих данных 
	//ИзменениеНастроекИсторииДанных (UpdateSettingsDataHistory) Предоставляет право изменения настройки истории данных 
	//ИзменениеКомментарияИсторииДанных (UpdateCommentDataHistory) Предоставляет право изменения комментария истории данных 
	//РегистрацияИнформационнойБазыСистемыВзаимодействия (CollaborationSystemInfoBaseRegistration) - регистрация информационной базы в системе взаимодействия.

КонецФункции

Функция ПраваТиповМетаданных()
	
	ПраваТипМетаданных = Новый Соответствие;
	ТипМетаданныхПрава = Новый Соответствие;
	
	Макет	= ЭтотОбъект.ПолучитьМакет("ПраваПоТипамМетаданных");
	
	Для А = 2 По Макет.ВысотаТаблицы Цикл
		
		ТипМД	= СтрЗаменить(СокрЛП(Макет.Область(А, 1, А, 1).Текст), " ", "");
		Право	= СтрЗаменить(СокрЛП(Макет.Область(А, 2, А, 2).Текст), " ", "");
		
		Если ТипМетаданныхПрава[ТипМД] = Неопределено Тогда
			ТипМетаданныхПрава.Вставить(ТипМД, Новый Структура(Право, Право));
		Иначе
			ТипМетаданныхПрава[ТипМД].Вставить(Право, Право);
		КонецЕсли;
		Если ПраваТипМетаданных[Право] = Неопределено Тогда
			ПраваТипМетаданных.Вставить(Право, Новый Структура(ТипМД, ТипМД));
		Иначе
			ПраваТипМетаданных[Право].Вставить(ТипМД, ТипМД);
		КонецЕсли
		
	КонецЦикла;
	
	Возврат ПраваТипМетаданных;
	
КонецФункции


Функция СведенияОПользователях()

	ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Пользователь");
	//Таблица.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("Справочник.Пользователи"));
	Таблица.Колонки.Добавить("ПотребоватьСменуПароляПриВходе", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СрокДействияНеОграничен", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СрокДействия", ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ДатаРазрешенияВходаВПрограмму", ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаПоследнейАктивности", ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаАвтоматическогоЗапрещенияВхода", ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаНачалаИспользованияПароля", ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ПоследнийИспользуемыйКлиент", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	
	// РегистрСведений.СведенияОПользователях нет в Конфигурации
	Если Метаданные.РегистрыСведений.Найти("СведенияОПользователях") = Неопределено Тогда 
			
		Возврат Таблица;
		
	Иначе // РегистрСведений.СведенияОПользователях есть в Конфигурации 
	
		Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	СведенияОПользователях.Пользователь КАК Пользователь,
		//	|	СведенияОПользователях.ПотребоватьСменуПароляПриВходе КАК ПотребоватьСменуПароляПриВходе,
		//	|	СведенияОПользователях.СрокДействияНеОграничен КАК СрокДействияНеОграничен,
		//	|	СведенияОПользователях.СрокДействия КАК СрокДействия,
		//	|	СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода КАК ПросрочкаРаботыВПрограммеДоЗапрещенияВхода,
		//	|	СведенияОПользователях.ДатаРазрешенияВходаВПрограмму КАК ДатаРазрешенияВходаВПрограмму,
		//	|	СведенияОПользователях.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности,
		//	|	СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода КАК ДатаАвтоматическогоЗапрещенияВхода,
		//	|	СведенияОПользователях.ДатаНачалаИспользованияПароля КАК ДатаНачалаИспользованияПароля,
		//	|	СведенияОПользователях.ИспользованныеПароли КАК ИспользованныеПароли,
		//	|	СведенияОПользователях.ПоследнийИспользуемыйКлиент КАК ПоследнийИспользуемыйКлиент
		//	|ИЗ
		//	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях";
		
		
		Запрос.Текст	= ЗапросТекстПолейПолучить("ВЫБРАТЬ", "СведенияОПользователях", Метаданные.РегистрыСведений["СведенияОПользователях"], "Измерения, Ресурсы, Реквизиты");
		Запрос.Текст	= Запрос.Текст + "
			|ИЗ
			|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выгрузить();
		
	КонецЕсли	
	
КонецФункции

Функция ЗапросТекстПолейПолучить(ТекстЗапроса, ИмяТаблицы, ОбъектМД, Свойства)
	
	Для Каждого Свойство Из Новый Структура(Свойства) Цикл
		Для Каждого Элемент Из ОбъектМД[Свойство.Ключ] Цикл
			ТекстЗапроса	= ТекстЗапроса + "
			|	" + ИмяТаблицы + "." + Элемент.Имя + " КАК " + Элемент.Имя + ",";
		КонецЦикла;
	КонецЦикла;
	ТекстЗапроса	= Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	Возврат ТекстЗапроса;
	
КонецФункции

	
